openapi: 3.0.3
info:
  title: Bilberry v3 API
  description: The public and internal API of Bilberry v3
  version: 0.0.0
servers:
  - url: https://bilberry.app
  - url: https://www.bilberry.app
security:
  - elderberryOAuth:
      - admin
paths:
  /{tenant}/v0/products:
    get:
      description: Returns paginated list of products
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved products from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new product
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Successfully created new product on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
  /{tenant}/v0/products/{product}:
    get:
      description: Returns a single product based on its ID
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the product from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific product based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the product on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
    delete:
      description: Soft-delete a specific product based on its ID
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully soft-deleted the product on the server
  /{tenant}/v0/products/{product}/bookables:
    get:
      description: Returns list of bookables
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - name: timeslot
          description: TODO
          in: query
          default: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the bookables from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bookable'
    put:
      description: Creates new bookables
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Bookable'
      responses:
        '201':
          description: Successfully created new bookables on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bookable'
  /{tenant}/v0/products/{product}/availability:
    get:
      description: Returns availability of the given product
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the availability from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Availability'
  /{tenant}/v0/vat-models:
    get:
      description: Returns paginated list of vat models
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved vat models from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VatModel'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new vat model
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatModel'
      responses:
        '201':
          description: Successfully created new vat model on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatModel'
  /{tenant}/v0/vat-models/{vat-model}:
    get:
      description: Returns a single vat model based on its ID
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatModelId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the vat model from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatModel'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific vat model based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatModelId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the vat model on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatModel'
    delete:
      description: Soft-delete a specific vat model based on its ID
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatModelId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully deleted the vat model on the server
  /{tenant}/v0/bookings:
    get:
      description: Returns paginated list of bookings
      tags:
        - Bookings API
      parameters:
        - name: name
          in: query
          description: Filters by name (ignores capitalisation, matches if provided name is part of full name)
          schema:
            type: string
        - name: email
          in: query
          description: Filters by email
          schema:
            type: string
            format: email
        - name: phone
          in: query
          description: Filters by phone number (whitespace is trimmed, can omit country code)
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved bookings from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new booking
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Successfully created new booking on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingWrapped'
  /{tenant}/v0/bookings/{booking}:
    get:
      description: Returns a single booking based on its ID
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/BookingId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the booking from the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingWrapped'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific booking based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/BookingId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/PatchObject'
                  - type: object
                    properties:
                      op:
                        type: string
                        description: Custom JSON Patch operations for this endpoint
                        enum:
                          - create-invoice
                          - cancel-invoice
                          - create-online-payment
      responses:
        '200':
          description: Successfully updated the booking on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingWrapped'
    delete:
      description: Cancel a specific booking based on its ID
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/BookingId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully cancelled the booking on the server
  /{tenant}/v0/invoices/{invoice}:
    get:
      description: Returns a single invoice based on its reference
      parameters:
        - $ref: '#/components/parameters/InvoiceRef'
        - $ref: '#/components/parameters/TenantAlias'
      tags:
        - Reporting API
      responses:
        '200':
          description: Successfully retrieved the invoice from the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceWrapped'
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/v0/users: {}
  /{tenant}/v0/resources: {}
  /{tenant}/v0/reports: {}
  /{tenant}/v0/staff: {}
components:
  securitySchemes:
    elderberryOAuth:
      type: oauth2
      description: This API uses OAuth 2 with the Authorization Code Flow with Proof Key for Code Exchange (PKCE)
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.bilberry.app/oauth/authorize
          tokenUrl: https://accounts.bilberry.app/oauth/token
          refreshUrl: https://accounts.bilberry.app/oauth/token/refresh
          scopes:
            admin: all access
  parameters:
    PageCursor:
      name: page
      in: query
      description: The cursor pointing to a page
      schema:
        type: string
        format: base64-encoded-string
        example: MXwwMUhDOVpIVkpSVEZZQ1gzMUdZVkQ5WDEzMXxuZXh0
    PerPage:
      name: per_page
      in: query
      description: Number of records per page
      schema:
        type: integer
        minimum: 1
    TenantAlias:
      name: tenant
      in: path
      required: true
      description: The tenant identifier or alias
      schema:
        type: string
    ProductId:
      name: product
      in: path
      required: true
      description: The product ID
      schema:
        type: integer
        minimum: 0
    From:
      name: from
      description: TODO
      in: query
      required: true
      schema:
        type: string
        format: date-time
    To:
      name: to
      description: TODO
      in: query
      required: true
      schema:
        type: string
        format: date-time
    VatModelId:
      name: vat-model
      in: path
      required: true
      description: The vat model ID
      schema:
        type: integer
        minimum: 0
    BookingId:
      name: booking
      in: path
      required: true
      description: The booking ID
      schema:
        type: string
        format: uuid
    InvoiceRef:
      name: invoice
      in: path
      required: true
      description: The invoice ref
      schema:
        type: integer
        minimum: 0
      example: '100427'
  schemas:
    Id:
      type: integer
      minimum: 1
      readOnly: true
    CreatedAt:
      type: string
      format: date-time
      readOnly: true
    ProductStatus:
      type: string
      enum:
        - DRAFT
        - PUBLISHED
    Age:
      type: integer
      minimum: 0
    IdWritable:
      type: integer
      minimum: 1
    CapacityMode:
      type: string
      enum:
        - FULLY_SHARED
        - SINGLE_INSTANCE
        - SINGLE_TICKET_OPTION
        - SINGLE_BOOKABLE
        - SINGLE_BOOKING
        - SINGLE_TICKET
        - SINGLE_PRODUCT
    ResourceRequirement:
      type: object
      required:
        - resourceId
        - capacity reduction
        - mode
        - createdAt
        - startOffset
        - endOffset
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        resourceId:
          $ref: '#/components/schemas/IdWritable'
        capacityReduction:
          type: integer
        mode:
          $ref: '#/components/schemas/CapacityMode'
        startOffset:
          type: integer
          default: 0
        endOffset:
          type: integer
          default: 0
        alternative:
          type: integer
          default: 1
          minimum: 1
    TicketOption:
      type: object
      required:
        - id
        - createdAt
        - name
        - minAge
        - maxAge
        - resourceRequirements
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        name:
          type: string
        minAge:
          $ref: '#/components/schemas/Age'
        maxAge:
          $ref: '#/components/schemas/Age'
        resourceRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRequirement'
        vatModelId:
          $ref: '#/components/schemas/IdWritable'
    Difficulty:
      type: string
      nullable: true
      enum:
        - EASY
        - MEDIUM
        - HARD
    Locale:
      type: string
      example: nb-NO
    WidgetInfoTranslation:
      type: object
      required:
        - id
        - title
        - shortDescription
        - longDescription
        - termsAndConditions
        - url
        - additionalInfo
      properties:
        id:
          $ref: '#/components/schemas/Locale'
        title:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        termsAndConditions:
          type: string
        url:
          type: string
          format: url
        additionalInfo:
          type: string
    WidgetInfo:
      type: object
      required:
        - id
        - createdAt
        - minAge
        - minPriceMinor
        - duration
        - translatable
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        minAge:
          type: integer
          nullable: true
        minPriceMinor:
          type: integer
          nullable: true
        duration:
          type: integer
          nullable: true
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        translations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WidgetInfoTranslation'
    Address:
      type: object
      required:
        - address
        - city
        - postalCode
        - country
      properties:
        address:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    GeographicPoint:
      type: object
      required:
        - longitude
        - latitude
      properties:
        longitude:
          type: number
          nullable: true
        latitude:
          type: number
          nullable: true
    Location:
      allOf:
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/GeographicPoint'
        - type: object
          required:
            - id
            - createdAt
          properties:
            id:
              $ref: '#/components/schemas/Id'
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
        - nullable: true
    Product:
      type: object
      required:
        - id
        - createdAt
        - name
        - description
        - cutoffTime
        - widgetInfo
        - status
        - ticketOptions
        - location
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProductStatus'
        cutoffTime:
          type: integer
        ticketOptions:
          type: array
          items:
            $ref: '#/components/schemas/TicketOption'
        widgetInfo:
          $ref: '#/components/schemas/WidgetInfo'
        location:
          $ref: '#/components/schemas/Location'
    Links:
      type: object
      required:
        - current
        - next
        - prev
      properties:
        current:
          type: string
          format: url
          nullable: true
        next:
          type: string
          format: url
          nullable: true
        prev:
          type: string
          format: url
          nullable: true
    ProductCreateRequest:
      type: object
      required:
        - name
        - description
        - status
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProductStatus'
        cutoffTime:
          type: integer
          default: 0
        ticketOptions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TicketOption'
        widgetInfo:
          $ref: '#/components/schemas/WidgetInfo'
        location:
          $ref: '#/components/schemas/Location'
    Op:
      type: string
      description: The operation to be carried out
    Path:
      type: string
      description: A path in the request object of the related POST request following modified JSON patch syntax
      example: /my/paths/12/asd
    Value:
      description: The value used for the operation (any type)
    PatchObject:
      oneOf:
        - type: object
          required:
            - op
            - path
            - value
          properties:
            op:
              allOf:
                - $ref: '#/components/schemas/Op'
                - enum:
                    - add
                    - replace
                    - test
            path:
              $ref: '#/components/schemas/Path'
            value:
              $ref: '#/components/schemas/Value'
        - type: object
          required:
            - op
            - path
          properties:
            op:
              allOf:
                - $ref: '#/components/schemas/Op'
                - enum:
                    - remove
            path:
              $ref: '#/components/schemas/Path'
    Price:
      type: string
    Bookable:
      type: object
      properties:
        ticketOptionId:
          $ref: '#/components/schemas/IdWritable'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        price:
          $ref: '#/components/schemas/Price'
        maxCapacity:
          type: integer
          minimum: 0
          nullable: true
        timeslots:
          type: object
          properties:
            duration:
              type: integer
              minimum: 0
            interval:
              type: integer
              minimum: 0
    Availability:
      type: object
      properties:
        bookableId:
          $ref: '#/components/schemas/Id'
        ticketOptionId:
          $ref: '#/components/schemas/Id'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        availability:
          type: integer
          minimum: 0
    MinorPercentage:
      type: integer
      minimum: 0
      maximum: 10000
    VatCategory:
      type: object
      required:
        - id
        - name
        - description
        - code
        - percentMinor
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        description:
          type: string
        code:
          type: string
        percentMinor:
          $ref: '#/components/schemas/MinorPercentage'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
    MinorAmount:
      type: integer
      minimum: 0
    VatRule:
      type: object
      required:
        - default
        - fixed
        - percentage
      properties:
        default:
          $ref: '#/components/schemas/VatCategory'
        fixed:
          type: array
          items:
            allOf:
              - type: object
                required:
                  - amountMinor
                  - description
                properties:
                  amountMinor:
                    $ref: '#/components/schemas/MinorAmount'
                  description:
                    type: string
              - $ref: '#/components/schemas/VatCategory'
        percentage:
          type: array
          items:
            allOf:
              - type: object
                required:
                  - percentMinor
                  - description
                properties:
                  percentMinor:
                    $ref: '#/components/schemas/MinorPercentage'
                  description:
                    type: string
              - $ref: '#/components/schemas/VatCategory'
    ValidFrom:
      type: string
      format: date-time
      description: Future date
    VatModel:
      type: object
      required:
        - id
        - versions
      properties:
        id:
          $ref: '#/components/schemas/Id'
        versions:
          type: array
          items:
            type: object
            properties:
              rules:
                $ref: '#/components/schemas/VatRule'
              validFrom:
                $ref: '#/components/schemas/ValidFrom'
    PhoneNumber:
      type: string
      format: phone
      example: '+4712345678'
    ULID:
      type: string
      format: ulid
      example: 01F8MECHZX3TBDSZ7XR8H8JHAF
      pattern: ^[0-7][0-9A-HJKMNP-TV-Z]{25}$
      readOnly: true
    BookingMetaInfo:
      allOf:
        - type: object
          required:
            - firstName
            - lastName
            - email
            - phone
          properties:
            firstName:
              type: string
              nullable: true
            lastName:
              type: string
              nullable: true
            email:
              type: string
              format: email
              nullable: true
            phone:
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
                - nullable: true
        - $ref: '#/components/schemas/Address'
    Ticket:
      type: object
      required:
        - id
        - bookableId
        - quantity
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        bookableId:
          type: integer
        quantity:
          type: integer
          minimum: 1
          default: 1
    InvoiceShort:
      type: object
      required:
        - id
        - createdAt
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
    Currency:
      type: string
      format: currency
      minLength: 3
      maxLength: 3
      example: NOK
    Amount:
      type: object
      required:
        - minorValue
        - currencyCode
      properties:
        minorValue:
          type: integer
          minimum: 0
        currencyCode:
          $ref: '#/components/schemas/Currency'
    DepositInvoice:
      allOf:
        - $ref: '#/components/schemas/InvoiceShort'
        - type: object
          required:
            - amountMinor
            - amount
            - creditedAt
          properties:
            amount:
              $ref: '#/components/schemas/Amount'
            creditedAt:
              type: string
              format: date-time
              readOnly: true
              nullable: true
    Payment:
      type: object
      required:
        - id
        - amount
        - createdAt
        - type
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        amount:
          $ref: '#/components/schemas/Amount'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        type:
          type: string
          enum:
            - ONLINE
            - CHECKOUT
            - GIFTCAR
            - ...
    OnlinePayment:
      type: object
      required:
        - id
        - provider
        - amount
        - createdAt
        - status
        - statusAt
        - bilberryPaymentId
      readOnly: true
      properties:
        id:
          type: string
          format: uuid
        provider:
          type: string
          enum:
            - NETS
            - STRIPE
        amount:
          $ref: '#/components/schemas/Amount'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        status:
          type: string
          enum:
            - CREATED
            - TIMED_OUT
            - COMPLETED
            - CANCELLED
        statusAt:
          type: string
          format: date-time
        bilberryPaymentId:
          allOf:
            - $ref: '#/components/schemas/ULID'
            - nullable: true
    Booking:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/ULID'
        - $ref: '#/components/schemas/BookingMetaInfo'
        - type: object
          required:
            - expiresAt
            - tickets
            - invoice
            - creditedInvoices
            - depositInvoices
            - payments
            - onlinePayments
          properties:
            expiresAt:
              type: string
              format: date-time
              nullable: true
              readOnly: true
            tickets:
              type: array
              items:
                $ref: '#/components/schemas/Ticket'
            invoice:
              allOf:
                - $ref: '#/components/schemas/InvoiceShort'
                - readOnly: true
                  nullable: true
            creditedInvoices:
              type: array
              readOnly: true
              items:
                allOf:
                  - $ref: '#/components/schemas/InvoiceShort'
                  - type: object
                    required:
                      - creditedAt
                    properties:
                      creditedAt:
                        type: string
                        format: date-time
            depositInvoices:
              type: array
              items:
                $ref: '#/components/schemas/DepositInvoice'
            payments:
              type: array
              items:
                $ref: '#/components/schemas/Payment'
            onlinePayments:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/OnlinePayment'
    BookingWrapped:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Booking'
    Invoice:
      readOnly: true
      allOf:
        - $ref: '#/components/schemas/InvoiceShort'
        - $ref: '#/components/schemas/BookingMetaInfo'
        - type: object
          required:
            - totalAmountGross
            - totalAmountNet
            - totalAmountVAT
            - items
            - creditedAt
          properties:
            totalAmountGross:
              $ref: '#/components/schemas/Amount'
            totalAmountNet:
              $ref: '#/components/schemas/Amount'
            totalAmountVAT:
              $ref: '#/components/schemas/Amount'
            items:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  amountNet:
                    $ref: '#/components/schemas/Amount'
                  amountGross:
                    $ref: '#/components/schemas/Amount'
                  amountVAT:
                    $ref: '#/components/schemas/Amount'
                  quantity:
                    type: integer
            creditedAt:
              type: string
              format: date-time
              nullable: true
    InvoiceWrapped:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Invoice'
  responses:
    404NotFound:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              description:
                type: string
              details:
                type: object
                properties: {}
              code:
                type: integer
