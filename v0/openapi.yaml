openapi: 3.1.0
info:
  title: Bilberry v3 API
  description: The public and internal API of Bilberry v3
  version: 0.0.0
servers:
  - url: https://base.bilberry.app
  - url: https://www.base.bilberry.app
security:
  - elderberryOAuth:
      - admin
paths:
  /{tenant}/api/v0/products:
    get:
      description: Returns paginated list of products. If called unauthenticated only published products are returned.
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved products from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new product
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Successfully created new product on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/products/{product}:
    get:
      description: Returns a single product based on its ID
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific product based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the product on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Soft-delete a specific product based on its ID
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully soft-deleted the product on the server
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/products/{product}/bookables:
    get:
      description: Returns list of bookables
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - name: bookableIds
          style: form
          explode: false
          in: query
          schema:
            type: array
            items:
              type: string
              pattern: ^[0-9]+$
        - name: groupAsTimeslots
          in: query
          schema:
            type: boolean
            default: false
        - name: getAvailabilities
          in: query
          schema:
            type: boolean
            default: false
        - name: precalculatePricesUpTo
          in: query
          schema:
            type: integer
            minimum: 1
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the bookables from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bookable'
    post:
      description: Creates single new bookables
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bookable'
      responses:
        '201':
          description: Successfully created new bookable on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Bookable'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    put:
      description: Creates new bookables
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Bookable'
      responses:
        '200':
          description: Successfully created new bookables on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bookable'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/products/{product}/upload:
    post:
      description: Uploads new image for product
      tags:
        - Products API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadProductImageRequest'
      responses:
        '201':
          description: Successfully uploaded image to the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProductMedia'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/vat-models:
    get:
      description: Returns a list of all vat models
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved vat models from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VatModel'
    post:
      description: Creates new vat model
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeprecatedVatModel'
      responses:
        '201':
          description: Successfully created new vat model on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/DeprecatedVatModel'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/vat-models/{vatModel}:
    get:
      description: Returns a single vat model based on its ID
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatModelId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the vat model from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatModel'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific vat model based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatModelId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the vat model on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/DeprecatedVatModel'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Soft-delete a specific vat model based on its ID
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatModelId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully deleted the vat model on the server
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/vat-categories:
    get:
      description: Returns paginated list of vat categories
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
        - $ref: '#/components/parameters/Ids'
        - $ref: '#/components/parameters/IncludeSoftDeleted'
      responses:
        '200':
          description: Successfully retrieved vat categories from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VatCategory'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new vat category
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatCategory'
      responses:
        '201':
          description: Successfully created new vat category on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatCategory'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/vat-categories/{vatCategory}:
    get:
      description: Returns a single vat category based on its ID
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatCategoryId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the vat category from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatCategory'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific vat category based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatCategoryId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the vat category on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VatCategory'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Soft-delete a specific vat category based on its ID
      tags:
        - VAT API
      parameters:
        - $ref: '#/components/parameters/VatCategoryId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully deleted the vat category on the server
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/bookings:
    get:
      description: Returns paginated list of bookings
      tags:
        - Bookings API
      parameters:
        - name: name
          in: query
          description: Filters by name (ignores capitalisation, matches if provided name is part of full name)
          schema:
            type: string
        - name: email
          in: query
          description: Filters by email
          schema:
            type: string
            format: email
        - name: phone
          in: query
          description: Filters by phone number (whitespace is trimmed, can omit country code)
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved bookings from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new booking
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Successfully created new booking on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingWrapped'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/bookings/{booking}:
    get:
      description: Returns a single booking based on its ID
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/BookingId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the booking from the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingWrapped'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific booking based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/BookingId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/PatchObject'
                  - type: object
                    required:
                      - op
                    additionalProperties: false
                    properties:
                      op:
                        type: string
                        description: Create the booking invoice if necessary and initiate an online payment (NETS) for the whole amount
                        enum:
                          - initiateOnlinePayment
                  - type: object
                    required:
                      - op
                      - value
                    additionalProperties: false
                    properties:
                      op:
                        type: string
                        description: Create the booking invoice if necessary and use the provided amount from the provided giftcard
                        enum:
                          - useGiftcard
                      value:
                        type: object
                        required:
                          - giftcardId
                          - amountMinor
                        properties:
                          giftcardId:
                            $ref: '#/components/schemas/ULID'
                          amountMinor:
                            $ref: '#/components/schemas/MinorAmount'
      responses:
        '200':
          description: Successfully updated the booking on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingWrapped'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Cancel a specific booking based on its ID
      tags:
        - Bookings API
      parameters:
        - $ref: '#/components/parameters/BookingId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully cancelled the booking on the server
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/resources:
    get:
      description: Returns paginated list of resources
      tags:
        - Resource API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved resources from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new resource
      tags:
        - Resource API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Successfully created new resource on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/resources/{resource}:
    get:
      description: Returns a single resource based on its ID
      tags:
        - Resource API
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the resource from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific resource based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Resource API
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the resource on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Soft-delete a specific resource based on its ID
      tags:
        - Resource API
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully deleted the resource on the server
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/giftcards:
    get:
      description: Returns paginated list of giftcards
      tags:
        - Giftcards API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved giftcards from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Giftcard'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new giftcard
      tags:
        - Giftcards API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftcardPostRequest'
      responses:
        '201':
          description: Successfully created new giftcard on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Giftcard'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/giftcards/{giftcard}:
    get:
      description: Returns a single giftcard based on its ID
      tags:
        - Giftcards API
      parameters:
        - $ref: '#/components/parameters/GiftcardId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the giftcard from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Giftcard'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific giftcard based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Giftcards API
      parameters:
        - $ref: '#/components/parameters/GiftcardId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the giftcard on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Giftcard'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Cancel a specific giftcard based on its ID
      tags:
        - Giftcards API
      parameters:
        - $ref: '#/components/parameters/GiftcardId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully cancelled the giftcard on the server
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/notifications:
    get:
      description: Returns paginated list of notifications.
      tags:
        - Notifications API
      parameters:
        - $ref: '#/components/parameters/PageCursor'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved notifications from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationResponse'
                  links:
                    $ref: '#/components/schemas/Links'
    post:
      description: Creates new notification
      tags:
        - Notifications API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreateRequest'
      responses:
        '201':
          description: Successfully created new notification on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/NotificationResponse'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/notifications/{notification}:
    get:
      description: Returns a single notification based on its ID
      tags:
        - Notifications API
      parameters:
        - $ref: '#/components/parameters/NotificationId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the notification from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/NotificationResponse'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific notification based on its ID. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Notifications API
      parameters:
        - $ref: '#/components/parameters/NotificationId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the notification on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/NotificationResponse'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Soft-delete a specific notification based on its ID
      tags:
        - Notifications API
      parameters:
        - $ref: '#/components/parameters/NotificationId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully soft-deleted the notification on the server
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/invoices/{invoice}:
    get:
      description: Returns a single invoice based on its reference
      parameters:
        - $ref: '#/components/parameters/InvoiceRef'
        - $ref: '#/components/parameters/TenantAlias'
      tags:
        - Reporting API
      responses:
        '200':
          description: Successfully retrieved the invoice from the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceWrapped'
        '404':
          $ref: '#/components/responses/404NotFound'
  /{tenant}/api/v0/settings:
    get:
      description: Returns basic settings of the bilberry tenant
      tags:
        - Settings
      responses:
        '200':
          description: Successfully retrieved the settings from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Settings'
  /{tenant}/api/v0/users/{user}:
    delete:
      description: Remove a specific user from a tenant based on its ID
      tags:
        - Users API
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully deleted the user from the tenant
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch user information for a specific user in a tenant based on its ID.
      tags:
        - Users API
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the user on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/roles:
    get:
      description: Returns list of roles.
      tags:
        - Roles API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved roles from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
  /api/v0/profile:
    get:
      description: Returns profile related information for the authenticated user
      tags:
        - Profile API
      responses:
        '200':
          description: Successfully retrieved the profile information from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProfileResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch user information for the authenticated user. This is inspired by the JSON patch syntax with some modifications such as custom operations and modified array referencing
      tags:
        - Profile API
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the user on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProfileResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Soft-deletes the user (NOT IMPLEMENTED YET)
      tags:
        - Profile API
      responses:
        '200':
          description: Successfully soft-deleted the user on the server
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /api/v0/profile/avatar:
    post:
      description: Uploads a new avatar for the authenticated user
      tags:
        - Profile API
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadUserAvatarRequest'
      responses:
        '201':
          description: Successfully uploaded image to the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UploadedMediaResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Deletes the avatar for the authenticated user
      tags:
        - Profile API
      responses:
        '200':
          description: Successfully deleted image on the server
        '204':
          $ref: '#/components/responses/204NoContent'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /api/v0/profile/password:
    post:
      description: Update password for authenticated user
      tags:
        - Profile API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Successfully updated the password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        '422':
          description: Validation error
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/user-invites:
    get:
      description: Returns a list of all user invites
      tags:
        - UserInvite API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved user invites from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserInvite'
    post:
      description: Issues new user invite
      tags:
        - UserInvite API
      parameters:
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueInviteRequest'
      responses:
        '201':
          description: Successfully issued user invite
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
  /{tenant}/api/v0/user-invites/{userInvite}:
    get:
      description: Returns a single user invite based on its ULID
      tags:
        - UserInvite API
      parameters:
        - $ref: '#/components/parameters/UserInviteId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully retrieved the user invite from the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UserInvite'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      description: Patch a specific vat model based on its ID.
      tags:
        - UserInvite API
      parameters:
        - $ref: '#/components/parameters/UserInviteId'
        - $ref: '#/components/parameters/TenantAlias'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchObject'
      responses:
        '200':
          description: Successfully updated the user invite on the server
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UserInvite'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      description: Delete a user invite based on its ID
      tags:
        - UserInvite API
      parameters:
        - $ref: '#/components/parameters/UserInviteId'
        - $ref: '#/components/parameters/TenantAlias'
      responses:
        '200':
          description: Successfully deleted the user invite
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
components:
  securitySchemes:
    elderberryOAuth:
      type: oauth2
      description: This API uses OAuth 2 with the Authorization Code Flow with Proof Key for Code Exchange (PKCE)
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.bilberry.app/oauth/authorize
          tokenUrl: https://accounts.bilberry.app/oauth/token
          refreshUrl: https://accounts.bilberry.app/oauth/token/refresh
          scopes:
            admin: all access
  parameters:
    PageCursor:
      name: page
      in: query
      description: The cursor pointing to a page
      schema:
        type: string
        format: base64-encoded-string
        examples:
          - MXwwMUhDOVpIVkpSVEZZQ1gzMUdZVkQ5WDEzMXxuZXh0
    PerPage:
      name: per_page
      in: query
      description: Number of records per page
      schema:
        type: integer
        minimum: 1
    TenantAlias:
      name: tenant
      in: path
      required: true
      description: The tenant identifier or alias
      schema:
        type: string
    ProductId:
      name: product
      in: path
      required: true
      description: The product ID
      schema:
        type: integer
        minimum: 0
        examples:
          - 1
    From:
      name: from
      description: TODO
      in: query
      schema:
        type: string
        format: date-time
    To:
      name: to
      description: TODO
      in: query
      schema:
        type: string
        format: date-time
    VatModelId:
      name: vatModel
      in: path
      required: true
      description: The vat model ID
      schema:
        type: integer
        minimum: 0
        examples:
          - 3
    Ids:
      name: ids
      description: The response will only contain records with these ids.
      style: form
      explode: false
      in: query
      schema:
        type: array
        items:
          type: string
          pattern: ^[0-9]+$
    IncludeSoftDeleted:
      name: include_soft_deleted
      in: query
      description: Include soft deleted records
      schema:
        type: boolean
        default: false
    VatCategoryId:
      name: vatCategory
      in: path
      required: true
      description: The vat category ID
      schema:
        type: integer
        minimum: 0
        examples:
          - 3
    BookingId:
      name: booking
      in: path
      required: true
      description: The booking ID
      schema:
        $ref: '#/components/schemas/ULID'
    ResourceId:
      name: resource
      in: path
      required: true
      description: The resource ID
      schema:
        type: integer
        minimum: 0
    GiftcardId:
      name: giftcard
      in: path
      required: true
      description: The giftcard ID
      schema:
        $ref: '#/components/schemas/ULID'
    NotificationId:
      name: notification
      in: path
      required: true
      description: The notification ID
      schema:
        type: integer
        minimum: 0
        examples:
          - 1
    InvoiceRef:
      name: invoice
      in: path
      required: true
      description: The invoice ref
      schema:
        type: integer
        minimum: 0
        examples:
          - '100427'
    UserId:
      name: user
      in: path
      required: true
      description: The User ID
      schema:
        type: integer
        minimum: 0
        examples:
          - 1
    UserInviteId:
      name: userInvite
      in: path
      required: true
      description: The user invite ID
      schema:
        $ref: '#/components/schemas/ULID'
  schemas:
    Id:
      type: integer
      minimum: 1
      readOnly: true
      examples:
        - 1
        - 2
    ReadOnlyDatetime:
      type: string
      format: date-time
      readOnly: true
    ProductStatus:
      type: string
      enum:
        - DRAFT
        - PUBLISHED
    NullableReadOnlyDatetime:
      type:
        - string
        - 'null'
      format: date-time
      readOnly: true
    Age:
      type: integer
      minimum: 0
    IdWritable:
      type: integer
      minimum: 1
    CapacityMode:
      type: string
      enum:
        - FULLY_SHARED
        - SINGLE_INSTANCE
        - SINGLE_TICKET_OPTION
        - SINGLE_BOOKABLE
        - SINGLE_BOOKING
        - SINGLE_TICKET
        - SINGLE_PRODUCT
    ResourceRequirement:
      type: object
      required:
        - resourceId
        - capacityReduction
        - mode
        - startOffset
        - endOffset
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        resourceId:
          $ref: '#/components/schemas/IdWritable'
        capacityReduction:
          type: integer
        mode:
          $ref: '#/components/schemas/CapacityMode'
        startOffset:
          type: integer
          default: 0
        endOffset:
          type: integer
          default: 0
        alternative:
          type: integer
          default: 1
          minimum: 1
    TicketOptionTranslation:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    TicketOption:
      type: object
      required:
        - minAge
        - maxAge
        - vatModelId
        - resourceRequirements
        - translations
      properties:
        id:
          $ref: '#/components/schemas/Id'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        name:
          type: string
        minAge:
          $ref: '#/components/schemas/Age'
        maxAge:
          $ref: '#/components/schemas/Age'
        resourceRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRequirement'
        translations:
          type:
            - object
            - 'null'
          properties: {}
          propertyNames:
            pattern: ^[a-z]{2}-[A-Z]{2}$
            description: The lang parameter of the translation, e.g. "en-US"
          additionalProperties:
            $ref: '#/components/schemas/TicketOptionTranslation'
          examples:
            - en-US:
                id: 1
                name: Adult
            - nb-NO:
                id: 2
                name: Voksen
        vatModelId:
          $ref: '#/components/schemas/IdWritable'
    MinorAmount:
      type: integer
      minimum: 0
    Currency:
      type: string
      format: currency
      minLength: 3
      maxLength: 3
      examples:
        - NOK
    Difficulty:
      type:
        - string
        - 'null'
      enum:
        - EASY
        - MEDIUM
        - HARD
    WidgetInfoTranslation:
      type: object
      required:
        - title
        - shortDescription
        - longDescription
        - termsAndConditions
        - url
        - additionalInfo
      properties:
        id:
          $ref: '#/components/schemas/Id'
        title:
          type:
            - string
            - 'null'
        shortDescription:
          type:
            - string
            - 'null'
        longDescription:
          type:
            - string
            - 'null'
        additionalInfo:
          type:
            - string
            - 'null'
        termsAndConditions:
          type:
            - string
            - 'null'
        url:
          type:
            - string
            - 'null'
          format: url
    ProductMedia:
      type: object
      required:
        - id
        - name
        - description
        - mimeType
        - size
        - signedUrl
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          examples:
            - 9fHZg02R71YJF29HJCGnd4zjBhBwvb0XfurUCiI9.png
        description:
          type: string
          examples:
            - A picture of a cat
        mimeType:
          type: string
          examples:
            - image/png
        size:
          type: integer
          examples:
            - 409623
        signedUrl:
          type: string
          format: uri
          examples:
            - https://bilberry.b-cdn.net/tenants/175e27d0-a84e-4ed6-b8ef-45a78bd9fdd1/images/product_images/9fHZg02R71YJF29HJCGnd4zjBhBwvb0XfurUCiI9.png?token=mGotfGPT1VD0rJcSLkN-Ig&expires=171440088
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    WidgetInfo:
      type:
        - object
        - 'null'
      required:
        - minAge
        - minPriceMinor
        - duration
        - translations
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        minAge:
          type:
            - integer
            - 'null'
        minPriceMinor:
          oneOf:
            - $ref: '#/components/schemas/MinorAmount'
            - type: 'null'
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
            - readOnly: true
        duration:
          type:
            - integer
            - 'null'
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        translations:
          type:
            - object
            - 'null'
          properties: {}
          propertyNames:
            pattern: ^[a-z]{2}-[A-Z]{2}$
            description: The lang parameter of the translation, e.g. "en-US"
          additionalProperties:
            $ref: '#/components/schemas/WidgetInfoTranslation'
          examples:
            - en-US:
                title: Go Climbing
                shortDescription: Climb up some trees
                longDescription: Climb up some trees for 3 hours at our awesome park
                additionalInfo: Not for people with fear of heights
                termsAndConditions: tldr
                url: https://awesome.climbing.no/en/3-hour-tree-climbing
            - nb-NO:
                title: Gå på klatring
                shortDescription: Klatre opp noen trær
                longDescription: Klatre opp noen trær i 3 timer i vår fantastiske park
                additionalInfo: Ikke for personer med høydeskrekk
                termsAndConditions: tldr
                url: https://awesome.climbing.no/no/3-hour-tree-climbing
        media:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
    QuestionTranslation:
      type: object
      required:
        - questionFormulation
      properties:
        questionFormulation:
          type: string
    Question:
      type: object
      required:
        - type
        - answerForm
        - required
        - translations
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          type: string
          enum:
            - BOOKING
            - GUEST
        answerForm:
          type: string
          enum:
            - TEXT
            - TEXTAREA
            - CHECKBOX
        required:
          type: boolean
        translations:
          type:
            - object
            - 'null'
          properties: {}
          propertyNames:
            pattern: ^[a-z]{2}-[A-Z]{2}$
            description: The lang parameter of the translation, e.g. "en-US"
          additionalProperties:
            $ref: '#/components/schemas/QuestionTranslation'
          examples:
            - en-US:
                id: 1
                questionFormulation: What size do you need for you climbing shoes?
            - nb-NO:
                id: 2
                questionFormulation: Hvilken størrelse trenger du på klatreskoene dine?
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    Address:
      type: object
      properties:
        address:
          type:
            - string
            - 'null'
          examples:
            - Vestfjordgata 20
        city:
          type:
            - string
            - 'null'
          examples:
            - Svolvær
        postalCode:
          type:
            - string
            - 'null'
          examples:
            - '8300'
        country:
          type:
            - string
            - 'null'
          description: ISO 3166-1 alpha-3 code, ISO 3166-1 alpha-2 code or english full name
          examples:
            - Norway
            - NOR
            - 'NO'
    GeographicPoint:
      type: object
      required:
        - longitude
        - latitude
      properties:
        latitude:
          type:
            - number
            - 'null'
          examples:
            - 68.23334442873325
        longitude:
          type:
            - number
            - 'null'
          examples:
            - 14.566281715341558
    Location:
      allOf:
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/GeographicPoint'
        - type:
            - object
            - 'null'
          required: []
          properties:
            id:
              $ref: '#/components/schemas/Id'
            createdAt:
              $ref: '#/components/schemas/ReadOnlyDatetime'
    ProductResponse:
      type: object
      required:
        - id
        - createdAt
        - name
        - description
        - cutoffTime
        - widgetInfo
        - status
        - questions
        - ticketOptions
        - extras
        - location
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProductStatus'
        cutoffTime:
          type: integer
        ticketOptions:
          type: array
          items:
            $ref: '#/components/schemas/TicketOption'
        extras:
          type: array
          items:
            $ref: '#/components/schemas/TicketOption'
        widgetInfo:
          $ref: '#/components/schemas/WidgetInfo'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        location:
          $ref: '#/components/schemas/Location'
    Links:
      type: object
      required:
        - current
        - next
        - prev
      properties:
        current:
          type:
            - string
            - 'null'
          format: url
        next:
          type:
            - string
            - 'null'
          format: url
        prev:
          type:
            - string
            - 'null'
          format: url
    ProductCreateRequest:
      type: object
      required:
        - name
        - description
        - status
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProductStatus'
        cutoffTime:
          type: integer
          default: 0
        ticketOptions:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/TicketOption'
        widgetInfo:
          $ref: '#/components/schemas/WidgetInfo'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        location:
          $ref: '#/components/schemas/Location'
    Path:
      type: string
      description: A path in the request object of the related POST request following modified JSON patch syntax
      examples:
        - my.paths[12].asd
    Value:
      description: The value used for the operation (any type)
    RemovePath:
      type: string
      description: A path in the request object of the related POST request following modified JSON patch syntax
      examples:
        - my.path[12]
    PatchObject:
      oneOf:
        - type: object
          required:
            - op
            - path
            - value
          addtionalProperties: false
          properties:
            op:
              type: string
              description: The operation to be carried out
              enum:
                - set
                - add
            path:
              $ref: '#/components/schemas/Path'
            value:
              $ref: '#/components/schemas/Value'
        - type: object
          required:
            - op
            - path
          addtionalProperties: false
          properties:
            op:
              type: string
              description: The operation to be carried out
              enum:
                - remove
            path:
              $ref: '#/components/schemas/RemovePath'
    PriceType:
      type: string
      enum:
        - STANDARD
        - GRADUATED
        - VOLUME
    StandardPrice:
      type: object
      required:
        - type
        - rules
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        type:
          $ref: '#/components/schemas/PriceType'
        rules:
          type: object
          required:
            - priceMinor
          properties:
            priceMinor:
              $ref: '#/components/schemas/MinorAmount'
    ComplexPrice:
      type: object
      required:
        - type
        - rules
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        type:
          $ref: '#/components/schemas/PriceType'
        rules:
          type: array
          items:
            type: object
            required:
              - priceMinor
              - flatFeeMinor
              - from
            properties:
              priceMinor:
                $ref: '#/components/schemas/MinorAmount'
              flatFeeMinor:
                $ref: '#/components/schemas/MinorAmount'
              rangeFrom:
                type: integer
                minimum: 1
    Price:
      oneOf:
        - $ref: '#/components/schemas/StandardPrice'
        - $ref: '#/components/schemas/ComplexPrice'
      discriminator:
        propertyName: type
        mapping:
          standard: '#/components/schemas/StandardPrice'
          graduated: '#/components/schemas/ComplexPrice'
          volume: '#/components/schemas/ComplexPrice'
    Availability:
      oneOf:
        - type: integer
          minimum: 0
          readOnly: true
        - type: string
          enum:
            - INF
          minimum: 0
          readOnly: true
    MinorPercentage:
      type: integer
      minimum: 0
      maximum: 10000
      examples:
        - 2500
    VatAmount:
      type: object
      required:
        - description
        - percentageMinor
        - account
      properties:
        description:
          type: string
        percentageMinor:
          $ref: '#/components/schemas/MinorPercentage'
        account:
          type:
            - string
            - 'null'
    PrecalculatedPrice:
      type: object
      required:
        - priceMinor
        - vatAmounts
      properties:
        priceMinor:
          $ref: '#/components/schemas/MinorAmount'
        vatAmounts:
          type: array
          items:
            $ref: '#/components/schemas/VatAmount'
    PrecalculatedPrices:
      type: object
      readOnly: true
      required:
        - currency
        - prices
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        prices:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PrecalculatedPrice'
    NonTimeslotBookable:
      type: object
      required:
        - ticketOptionId
        - start
        - end
        - price
        - maxCapacity
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        ticketOptionId:
          $ref: '#/components/schemas/IdWritable'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        price:
          $ref: '#/components/schemas/Price'
        maxCapacity:
          type:
            - integer
            - 'null'
          minimum: 0
        availability:
          $ref: '#/components/schemas/Availability'
        precalculatedPrices:
          $ref: '#/components/schemas/PrecalculatedPrices'
    TimeslotBookable:
      type: object
      required:
        - ticketOptionId
        - start
        - end
        - price
        - maxCapacity
        - timeslot
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        ticketOptionId:
          $ref: '#/components/schemas/IdWritable'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        price:
          $ref: '#/components/schemas/Price'
        maxCapacity:
          type:
            - integer
            - 'null'
          minimum: 0
        availability:
          $ref: '#/components/schemas/Availability'
        timeslot:
          type: object
          required:
            - duration
            - interval
          properties:
            duration:
              type: integer
              minimum: 0
            interval:
              type: integer
              minimum: 0
        precalculatedPrices:
          $ref: '#/components/schemas/PrecalculatedPrices'
    Bookable:
      oneOf:
        - $ref: '#/components/schemas/NonTimeslotBookable'
        - $ref: '#/components/schemas/TimeslotBookable'
    File:
      type: string
      format: binary
      description: The file to upload
    UploadProductImageRequest:
      type: object
      required:
        - file
        - description
      properties:
        file:
          $ref: '#/components/schemas/File'
        description:
          type: string
    ValidFrom:
      type: string
      format: date-time
    StandardVatModelVersion:
      type: object
      required:
        - id
        - validFrom
        - percentageMinor
      properties:
        id:
          $ref: '#/components/schemas/Id'
        validFrom:
          $ref: '#/components/schemas/ValidFrom'
        percentageMinor:
          $ref: '#/components/schemas/MinorPercentage'
        description:
          type: string
        account:
          type: string
    StandardVatModel:
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          type: string
          enum:
            - STANDARD
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/StandardVatModelVersion'
    AmountBasedVatRule:
      type: object
      required:
        - description
        - standardVatRuleId
        - amountMinor
      properties:
        description:
          type: string
        amountMinor:
          $ref: '#/components/schemas/MinorAmount'
        standardVatRuleId:
          $ref: '#/components/schemas/IdWritable'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
    PercentageBasedVatRule:
      type: object
      required:
        - description
        - standardVatRuleId
        - percentageMinor
      properties:
        description:
          type: string
        percentageMinor:
          $ref: '#/components/schemas/MinorPercentage'
        standardVatRuleId:
          $ref: '#/components/schemas/IdWritable'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
    ComplexVatModelVersion:
      type: object
      required:
        - id
        - validFrom
        - rules
      properties:
        id:
          $ref: '#/components/schemas/Id'
        validFrom:
          $ref: '#/components/schemas/ValidFrom'
        rules:
          type: object
          required: []
          properties:
            amountBased:
              type:
                - array
                - 'null'
              items:
                $ref: '#/components/schemas/AmountBasedVatRule'
            percentageBased:
              type:
                - array
                - 'null'
              items:
                $ref: '#/components/schemas/PercentageBasedVatRule'
    ComplexVatModel:
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          type: string
          enum:
            - COMPLEX
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ComplexVatModelVersion'
    VatModel:
      oneOf:
        - $ref: '#/components/schemas/StandardVatModel'
        - $ref: '#/components/schemas/ComplexVatModel'
    DeprecatedVatModel:
      type: object
      required:
        - versions
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
        versions:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Id'
              validFrom:
                $ref: '#/components/schemas/ValidFrom'
              rules:
                type: object
                required: []
                properties:
                  default:
                    type: object
                  amountBased:
                    type:
                      - array
                      - 'null'
                    items:
                      type: object
                      required:
                        - description
                        - vatCategoryId
                        - amountMinor
                      properties:
                        description:
                          type: string
                        amountMinor:
                          $ref: '#/components/schemas/MinorAmount'
                        vatCategoryId:
                          $ref: '#/components/schemas/IdWritable'
                        createdAt:
                          $ref: '#/components/schemas/ReadOnlyDatetime'
                        deletedAt:
                          $ref: '#/components/schemas/NullableReadOnlyDatetime'
                  percentageBased:
                    type:
                      - array
                      - 'null'
                    items:
                      type: object
                      required:
                        - description
                        - vatCategoryId
                        - percentageMinor
                      properties:
                        description:
                          type: string
                        percentageMinor:
                          $ref: '#/components/schemas/MinorPercentage'
                        vatCategoryId:
                          $ref: '#/components/schemas/IdWritable'
                        createdAt:
                          $ref: '#/components/schemas/ReadOnlyDatetime'
                        deletedAt:
                          $ref: '#/components/schemas/NullableReadOnlyDatetime'
    Datetime:
      type: string
      format: date-time
    Account:
      type:
        - string
        - 'null'
      examples:
        - '3100'
    VatCategoryVersion:
      type: object
      required:
        - validFrom
        - description
        - percentageMinor
      properties:
        id:
          $ref: '#/components/schemas/Id'
        validFrom:
          $ref: '#/components/schemas/Datetime'
        description:
          type: string
        account:
          $ref: '#/components/schemas/Account'
        percentageMinor:
          $ref: '#/components/schemas/MinorPercentage'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
    VatCategory:
      type: object
      required:
        - versions
      properties:
        id:
          $ref: '#/components/schemas/Id'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/VatCategoryVersion'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
    PhoneNumber:
      type: string
      format: phone
      examples:
        - +47 12345678
    ULID:
      type: string
      format: ulid
      examples:
        - 01F8MECHZX3TBDSZ7XR8H8JHAF
      pattern: ^[0-7][0-9A-HJKMNP-TV-Z]{25}$
      readOnly: true
    LangParameter:
      type: string
      examples:
        - nb-NO
        - en-US
    BookingMetaInfo:
      allOf:
        - type: object
          required:
            - firstName
            - lastName
            - email
            - phone
            - lang
          properties:
            firstName:
              type:
                - string
                - 'null'
            lastName:
              type:
                - string
                - 'null'
            email:
              type:
                - string
                - 'null'
              format: email
            phone:
              oneOf:
                - $ref: '#/components/schemas/PhoneNumber'
                - type: 'null'
            lang:
              oneOf:
                - $ref: '#/components/schemas/LangParameter'
                - type: 'null'
        - $ref: '#/components/schemas/Address'
    Ticket:
      type: object
      required:
        - bookableId
        - quantity
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        bookableId:
          type: integer
        quantity:
          type: integer
          minimum: 1
          default: 1
    GroupedInvoices:
      type: object
      readOnly: true
      properties:
        active:
          allOf:
            - readOnly: true
            - oneOf:
                - $ref: '#/components/schemas/Id'
                - type: 'null'
        credited:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Id'
        deposits:
          type: array
          items:
            $ref: '#/components/schemas/Id'
    Amount:
      type: object
      required:
        - minorValue
        - currency
      properties:
        minorValue:
          $ref: '#/components/schemas/MinorAmount'
        currency:
          $ref: '#/components/schemas/Currency'
    PaymentType:
      type: string
      enum:
        - NETS
        - GIFTCARD
    Payment:
      type: object
      required:
        - id
        - source
        - sourceId
        - amount
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        amount:
          $ref: '#/components/schemas/Amount'
        source:
          $ref: '#/components/schemas/PaymentType'
        sourceId:
          $ref: '#/components/schemas/ULID'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    UUID:
      type: string
      format: uuid
      examples:
        - 42df5c9c-3c75-465e-b629-c11fccf4372a
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      readOnly: true
    NetsPaymentStatus:
      type: string
      enum:
        - PENDING
        - INITIATED
        - CREATED
        - RESERVED
        - COMPLETED
        - CANCELLED
        - FAILED
        - CANCEL_FAILED
        - CHECKOUT_COMPLETED
    NetsPaymentSource:
      type: object
      readOnly: true
      required:
        - id
        - netsCheckoutKey
        - netsPaymentId
        - amount
        - createdAt
        - statusUpdatedAt
        - status
        - paymentType
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        netsCheckoutKey:
          type: string
        netsPaymentId:
          $ref: '#/components/schemas/UUID'
        amount:
          $ref: '#/components/schemas/Amount'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        statusUpdatedAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        status:
          $ref: '#/components/schemas/NetsPaymentStatus'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
    GiftcardPaymentSource:
      type: object
      readOnly: true
      required:
        - id
        - giftcardId
        - amount
        - createdAt
        - paymentType
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        giftcardId:
          $ref: '#/components/schemas/ULID'
        amount:
          $ref: '#/components/schemas/Amount'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
    PaymentSource:
      oneOf:
        - $ref: '#/components/schemas/NetsPaymentSource'
        - $ref: '#/components/schemas/GiftcardPaymentSource'
      discriminator:
        propertyName: paymentType
        mapping:
          NETS: '#/components/schemas/NetsPaymentSource'
          GIFTCARD: '#/components/schemas/GiftcardPaymentSource'
    Booking:
      type: object
      required:
        - tickets
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        contact:
          $ref: '#/components/schemas/BookingMetaInfo'
        expiresAt:
          type:
            - string
            - 'null'
          format: date-time
          readOnly: true
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        invoices:
          $ref: '#/components/schemas/GroupedInvoices'
        payments:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Payment'
        paymentSources:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/PaymentSource'
    BookingWrapped:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Booking'
    ResourceCapacityOverrides:
      type: object
      required:
        - start
        - end
        - capacity
      properties:
        id:
          $ref: '#/components/schemas/Id'
        start:
          $ref: '#/components/schemas/Datetime'
        end:
          $ref: '#/components/schemas/Datetime'
        capacity:
          type: integer
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    Resource:
      type: object
      required:
        - name
        - capacity
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        description:
          type:
            - string
            - 'null'
        capacity:
          type: integer
          minimum: 0
        isManaged:
          type: boolean
          default: true
        capacityOverrides:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ResourceCapacityOverrides'
        deletedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    Contact:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
          examples:
            - Ola
        lastName:
          type: string
          examples:
            - Nordmann
        email:
          type: string
          format: email
          examples:
            - ola.nordmann@example.com
    GiftcardMessage:
      type:
        - string
        - 'null'
      examples:
        - Happy birthday, here is a gift card for you!
    GiftcardCode:
      type: string
      examples:
        - 123-456-789
    NullableDatetime:
      type:
        - string
        - 'null'
      format: date-time
    GiftcardUsage:
      type: object
      required:
        - bookingId
        - amountMinor
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        bookingId:
          $ref: '#/components/schemas/ULID'
        amountMinor:
          $ref: '#/components/schemas/MinorAmount'
    Giftcard:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        contact:
          $ref: '#/components/schemas/Contact'
        invoiceNumber:
          type:
            - integer
            - 'null'
        amount:
          $ref: '#/components/schemas/Amount'
        amountAvailable:
          $ref: '#/components/schemas/Amount'
        message:
          $ref: '#/components/schemas/GiftcardMessage'
        code:
          $ref: '#/components/schemas/GiftcardCode'
        enabled:
          type: boolean
        expiresAt:
          $ref: '#/components/schemas/NullableDatetime'
        usages:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/GiftcardUsage'
    GiftcardPostRequest:
      type: object
      required:
        - contact
        - amountMinor
      properties:
        contact:
          $ref: '#/components/schemas/Contact'
        amountMinor:
          $ref: '#/components/schemas/MinorAmount'
        message:
          $ref: '#/components/schemas/GiftcardMessage'
        expiresAt:
          $ref: '#/components/schemas/NullableDatetime'
        code:
          $ref: '#/components/schemas/GiftcardCode'
    ConditionResponse:
      type: object
      required:
        - id
        - createdAt
        - description
        - rules
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        description:
          type: string
        rules:
          type: string
    TriggerResponse:
      type: object
      required:
        - id
        - createdAt
        - eventType
        - conditions
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        eventType:
          type: string
        conditions:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ConditionResponse'
    TargetResponse:
      type: object
      required:
        - id
        - createdAt
        - description
        - rules
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        description:
          type: string
        rules:
          type: string
    NotificationResponse:
      type: object
      required:
        - id
        - createdAt
        - name
        - description
        - active
        - triggers
        - targets
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        triggers:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/TriggerResponse'
        targets:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/TargetResponse'
    TargetCreateRequest:
      type: object
      required:
        - description
        - rule
        - type
      properties:
        description:
          type: string
        type:
          type: string
        rule:
          type: object
    ConditionCreateRequest:
      type: object
      required:
        - description
        - type
        - rule
      properties:
        description:
          type: string
        type:
          type: string
        rule:
          type: object
    TriggerCreateRequest:
      type: object
      required:
        - eventType
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        eventType:
          type: string
        conditions:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ConditionCreateRequest'
    NotificationCreateRequest:
      type: object
      required:
        - name
        - description
        - active
      properties:
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        targets:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/TargetCreateRequest'
        triggers:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/TriggerCreateRequest'
    InvoiceShort:
      type:
        - object
        - 'null'
      required:
        - id
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    Invoice:
      readOnly: true
      allOf:
        - $ref: '#/components/schemas/InvoiceShort'
        - $ref: '#/components/schemas/BookingMetaInfo'
        - type: object
          required:
            - totalAmountGross
            - totalAmountNet
            - totalAmountVAT
            - items
            - creditedAt
          properties:
            totalAmountGross:
              $ref: '#/components/schemas/Amount'
            totalAmountNet:
              $ref: '#/components/schemas/Amount'
            totalAmountVAT:
              $ref: '#/components/schemas/Amount'
            items:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  amountNet:
                    $ref: '#/components/schemas/Amount'
                  amountGross:
                    $ref: '#/components/schemas/Amount'
                  amountVAT:
                    $ref: '#/components/schemas/Amount'
                  quantity:
                    type: integer
            creditedAt:
              type:
                - string
                - 'null'
              format: date-time
    InvoiceWrapped:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Invoice'
    Timezone:
      type: string
      pattern: '[A-Z][a-z]+\/[A-Z][a-z]+'
      examples:
        - Europe/Oslo
        - Europe/London
    Settings:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        timezone:
          $ref: '#/components/schemas/Timezone'
        contentLanguages:
          type: array
          items:
            $ref: '#/components/schemas/LangParameter'
    Email:
      type: string
      format: email
      examples:
        - john.doe@bilberry.no
    PhoneNumberNullable:
      type:
        - string
        - 'null'
      format: phone
      examples:
        - +47 12345678
    Permission:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          examples:
            - product:read
        description:
          type: string
          examples:
            - Read product
    Role:
      type: object
      required:
        - id
        - name
        - permissions
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          examples:
            - user
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    UserResponse:
      type: object
      required:
        - id
        - createdAt
        - fullName
        - displayName
        - email
        - phone
        - role
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        fullName:
          type: string
          examples:
            - John Doe
        displayName:
          type: string
          examples:
            - John
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/PhoneNumberNullable'
        role:
          $ref: '#/components/schemas/Role'
    EmailPending:
      type:
        - string
        - 'null'
      format: email
      examples:
        - john.temp.doe@bilberry.no
    UploadedMediaResponse:
      type:
        - object
        - 'null'
      required:
        - id
        - name
        - mimeType
        - size
        - signedUrl
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          examples:
            - 9fHZg02R71YJF29HJCGnd4zjBhBwvb0XfurUCiI9.png
        description:
          type:
            - string
            - 'null'
          examples:
            - A picture of a cat
        mimeType:
          type: string
          examples:
            - image/png
        size:
          type: integer
          examples:
            - 409623
        signedUrl:
          type: string
          format: url
          examples:
            - https://bilberry.b-cdn.net/central/images/user_avatars/5ZvoEQWq6avx89nQEMvDK8OGe4cMoM6BLuKQU3Fs.png?token=mGotfGPT1VD0rJcSLkN-Ig&expires=171440088
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    SimpleTenantResponse:
      type: object
      required:
        - id
        - name
        - aliases
        - currentAlias
        - settings
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
        aliases:
          type: array
          items:
            type: string
        currentAlias:
          type: string
        settings:
          $ref: '#/components/schemas/Settings'
    DateFormat:
      type:
        - string
        - 'null'
      enum:
        - dd.mm.yyyy
        - yyyy.mm.dd
        - mm.dd.yyyy
    ClockDisplayFormat:
      type:
        - string
        - 'null'
      enum:
        - TWELVE_HOURS
        - TWENTY_FOUR_HOURS
      examples:
        - TWELVE_HOURS
        - TWENTY_FOUR_HOURS
    ThousandsSeparator:
      type:
        - string
        - 'null'
      enum:
        - COMMA
        - DOT
        - SPACE
    DecimalSeparator:
      type:
        - string
        - 'null'
      enum:
        - COMMA
        - DOT
    UserPreferenceResponse:
      type: object
      required:
        - lang
      properties:
        lang:
          $ref: '#/components/schemas/LangParameter'
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        clockDisplayFormat:
          $ref: '#/components/schemas/ClockDisplayFormat'
        thousandsSeparator:
          $ref: '#/components/schemas/ThousandsSeparator'
        decimalSeparator:
          $ref: '#/components/schemas/DecimalSeparator'
    ProfileResponse:
      type: object
      required:
        - id
        - createdAt
        - fullName
        - displayName
        - email
        - phone
        - avatar
        - access
        - permissions
        - preferences
      properties:
        id:
          $ref: '#/components/schemas/Id'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
        fullName:
          type: string
          examples:
            - John Doe
        displayName:
          type: string
          description: The name that will be displayed to other users
          examples:
            - John
        email:
          $ref: '#/components/schemas/Email'
        pendingNewEmail:
          description: Temporary email address for email change. Will be null if no email change is in progress.
          $ref: '#/components/schemas/EmailPending'
        phone:
          $ref: '#/components/schemas/PhoneNumberNullable'
        avatar:
          $ref: '#/components/schemas/UploadedMediaResponse'
        passwordChangedAt:
          $ref: '#/components/schemas/NullableReadOnlyDatetime'
        access:
          type: array
          items:
            $ref: '#/components/schemas/SimpleTenantResponse'
        permissions:
          description: Permissions for the user (not implemented yet)
          type:
            - array
            - 'null'
        preferences:
          $ref: '#/components/schemas/UserPreferenceResponse'
    UploadUserAvatarRequest:
      type: object
      required:
        - file
      properties:
        file:
          $ref: '#/components/schemas/File'
        description:
          type: string
    PasswordResetRequest:
      type: object
      required:
        - oldPassword
        - newPassword
        - newPassword_confirmation
      properties:
        oldPassword:
          type: string
          description: The existing password
          examples:
            - theOldPassword
        newPassword:
          type: string
          examples:
            - theNewPassword
        newPassword_confirmation:
          type: string
          description: Must be identical to newPassword
          examples:
            - theNewPassword
    PasswordResetResponse:
      type: object
      properties:
        status:
          type: integer
          examples:
            - 200
        message:
          type: string
          examples:
            - Password updated
    UserInvite:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        userEmail:
          $ref: '#/components/schemas/Email'
        tenantName:
          type:
            - string
        inviteStatus:
          type:
            - string
        inviteUrl:
          type:
            - string
        role:
          type:
            - string
        expiresAt:
          $ref: '#/components/schemas/NullableDatetime'
        createdAt:
          $ref: '#/components/schemas/ReadOnlyDatetime'
    IssueInviteRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          description: The email that the invites is issued to
          examples:
            - newuser@bilberry.no
        role:
          type: string
          description: Role given to the new user
          examples:
            - admin
  responses:
    422UnprocessableEntity:
      description: Unprocessable entity error / validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              description:
                type: string
              details:
                type: object
                properties: {}
              status:
                type: integer
                examples:
                  - 422
    404NotFound:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              status:
                type: integer
                examples:
                  - 404
    401Unauthorized:
      description: Unauthorized. Request lacks valid authentication credentials.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                examples:
                  - Unauthorized.
              status:
                type: integer
                examples:
                  - 401
    400BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                examples:
                  - Bad request.
              status:
                type: integer
                examples:
                  - 400
    403Forbidden:
      description: Forbidden error. The user does not have permission to access the resource (Unauthorized)
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              status:
                type: integer
                examples:
                  - 403
    204NoContent:
      description: No content response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Request has succeeded, but the client doesn't need to navigate away from its current page
              status:
                type: integer
                examples:
                  - 204
